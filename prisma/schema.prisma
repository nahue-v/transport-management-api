// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output = "../../node_modules/.prisma/client"
  engineType = "client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task{
  id Int @id @default(autoincrement())
  title String
  description String?
}


model User {
  id        Int     @id @default(autoincrement())
  name      String
  email     String  @unique
  password  String
  role      Role    @default(CLIENT)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  RefreshToken RefreshToken[]
  orders Order[]
}

enum Role {
  ADMIN
  OPERATOR
  DRIVER
  CLIENT
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Product {
  id       Int          @id @default(autoincrement())
  name     String
  price    Float
  stock    Int
  orderItems OrderItem[]
}

model Order {
  id        Int         @id @default(autoincrement())
  clientId Int
  client   User        @relation(fields: [clientId], references: [id])
  date     DateTime    @default(now())
  state    State      @default(PENDING)
  //camionId  Int?
  //truck    Camion?     @relation(fields: [camionId], references: [id])
  orderItems OrderItem[]
  total Float
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float     // precio en el momento del pedido (congelado)

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Truck{
  id Int @id @default(autoincrement())
  plate String @unique
  capacity Int
  status TruckStatus @default(AVAILABLE)

  driver Driver?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Driver {
  id        Int     @id @default(autoincrement())
  name      String
  email     String   @unique
  truckId   Int?     @unique
  truck     Truck?   @relation(fields: [truckId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


enum TruckStatus {
  AVAILABLE
  IN_MAINTENANCE
}

enum State {
  PENDING
  PREPARATION
  LOADED
  DELIVERED
}